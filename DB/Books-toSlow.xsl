<?xml version="1.0"?><xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0">	<xsl:param name="data" select="/RESPONSE/RESULTS[@name='data']/MEDIA"/>	<xsl:template match="/RESPONSE">		<html>			<head>				<title>Prix Fernand Baudin - Liste des soumissions</title>				<style>					body{ font-family:Helvetica, Arial, Sans-Serif;}					table, tr, td, th {border:1px solid black; border-collapse:collapse; vertical-align:top; padding:2px;font-size:11px; text-align:left;}					a img{border:none; margin-right:3px;}				</style>				<script/>			</head>			<body>				<h1>Prix Fernand Baudin - Liste des soumissions</h1>				<!-- formulaire de recherche -->				<!-- formulaire d'affichage -->				<xsl:apply-templates select="/RESPONSE/DISPLAY"/>			</body>		</html>	</xsl:template>	<!-- -->	<!-- start function -->	<xsl:template match="DISPLAY">		<table>			<tr>				<xsl:apply-templates select="*" mode="display_header"/>			</tr>			<xsl:apply-templates select="/RESPONSE/RESULTS[@name='data']" mode="listing"/>		</table>	</xsl:template>	<!-- -->	<!-- table header -->	<xsl:template match="GROUP" mode="display_header">		<xsl:apply-templates select="*" mode="display_header"/>	</xsl:template>	<xsl:template match="ELEMENT" mode="display_header">		<xsl:param name="class" select="../@class"/>		<th>			<xsl:if test="$class != ''">				<xsl:attribute name="class">					<xsl:value-of select="$class"/>				</xsl:attribute>			</xsl:if>			<xsl:apply-templates select="." mode="sort"/>			<xsl:apply-templates select="." mode="label"/>		</th>	</xsl:template>	<!-- -->	<!-- specific element label -->	<xsl:template match="ELEMENT" mode="label">		<xsl:value-of select="@node"/>	</xsl:template>	<xsl:template match="ELEMENT[@module='CATEGORY']" mode="label">		<xsl:value-of select="@fatherID"/>	</xsl:template>	<xsl:template match="ELEMENT[@module='DEPENDENCY']" mode="label">		<xsl:value-of select="@type"/>	</xsl:template>	<!-- -->	<!-- specific elements sort template -->	<xsl:template match="*" mode="basic_sort">		<xsl:param name="var"/>		<xsl:param name="type" select="@data-type"/>		<a href="{//NECTIL/this_script}?sort={$var}&amp;order=descending&amp;type={$type}">			<img src="images/down.gif"/>		</a>		<a href="{//NECTIL/this_script}?sort={$var}&amp;order=ascending&amp;type={$type}">			<img src="images/up.gif"/>		</a>	</xsl:template>	<xsl:template match="ELEMENT" mode="sort">		<xsl:apply-templates select="." mode="basic_sort">			<xsl:with-param name="var">				<xsl:value-of select="@node"/>			</xsl:with-param>		</xsl:apply-templates>	</xsl:template>	<xsl:template match="ELEMENT[@module='DEPENDENCY']" mode="sort">		<xsl:apply-templates select="." mode="basic_sort">			<xsl:with-param name="var">DEPENDENCY[<xsl:value-of select="@type"/>]</xsl:with-param>		</xsl:apply-templates>	</xsl:template>	<xsl:template match="ELEMENT[@module='CATEGORY']" mode="sort">		<xsl:apply-templates select="." mode="basic_sort">			<xsl:with-param name="var">CATEGORY[<xsl:value-of select="@fatherID"/>]</xsl:with-param>		</xsl:apply-templates>	</xsl:template>	<!-- -->	<!-- template de tri en fonction du choix de l'utilisateur-->	<xsl:template match="RESULTS" mode="listing">		<xsl:for-each select="*">			<xsl:apply-templates select="." mode="data"/>		</xsl:for-each>	</xsl:template>	<xsl:template match="RESULTS[/RESPONSE/URL/sort != '']" mode="listing">		<xsl:for-each select="*">			<xsl:sort select=".//*[name() = //URL/sort]" data-type="{//URL/type}" order="{//URL/order}"/>			<xsl:apply-templates select="." mode="data"/>		</xsl:for-each>	</xsl:template>	<xsl:template match="RESULTS[contains(/RESPONSE/URL/sort, 'DEPENDENCY') = 'true']" mode="listing">		<xsl:param name="dept_type" select="substring-before(substring-after(//URL/sort, '['), ']')"/>		<xsl:for-each select="*">			<xsl:sort select="DEPENDENCIES/DEPENDENCY[@type=$dept_type]/CONTACT[1]/INFO/LASTNAME | DEPENDENCIES/DEPENDENCY[@type=$dept_type]/CONTACT[1]/INFO/DENOMINATION[../LASTNAME = '']" data-type="{//URL/type}" order="{//URL/order}"/>			<xsl:apply-templates select="." mode="data"/>		</xsl:for-each>	</xsl:template>	<xsl:template match="RESULTS[contains(/RESPONSE/URL/sort, 'CATEGORY') = 'true']" mode="listing">		<xsl:param name="fatherID" select="substring-before(substring-after(//URL/sort, '['), ']')"/>		<xsl:for-each select="*">			<xsl:sort select="CATEGORIES/CATEGORY[@fatherID=$fatherID]/LABEL" data-type="{//URL/type}" order="{//URL/order}"/>			<xsl:apply-templates select="." mode="data"/>		</xsl:for-each>	</xsl:template>	<!-- -->	<!-- specific element display by module -->	<xsl:template match="GROUP" mode="display">		<xsl:param name="mID"/>		<xsl:param name="node"/>		<xsl:param name="class" select="@class"/>		<xsl:apply-templates select="*" mode="display">			<xsl:with-param name="mID" select="$mID"/>			<xsl:with-param name="node" select="$node"/>			<xsl:with-param name="param" select="$class"/>		</xsl:apply-templates>		</xsl:template>	<xsl:template match="ELEMENT" mode="display">		<xsl:param name="mID"/>		<xsl:param name="node"/>		<xsl:param name="class"/>		<td>			<xsl:if test="$class != ''">				<xsl:attribute name="class">					<xsl:value-of select="$class"/>				</xsl:attribute>			</xsl:if>			<xsl:apply-templates select="." mode="display_content">				<xsl:with-param name="mID" select="$mID"/>				<xsl:with-param name="node" select="$node"/>			</xsl:apply-templates>		</td>	</xsl:template>	<xsl:template match="ELEMENT" mode="display_content">		<xsl:param name="node"/>		<xsl:param name="mID"/>		<xsl:value-of select="//*[name() = $node and @ID = $mID]//DESCRIPTIONS/DESCRIPTION//*[name() = current()/@node]"/>	</xsl:template>	<xsl:template match="ELEMENT[@module = 'CATEGORY']" mode="display_content">		<xsl:param name="node"/>		<xsl:param name="mID"/>		<xsl:for-each select="//*[name() = $node and @ID = $mID]//CATEGORIES/CATEGORY[@fatherID = current()/@fatherID]">			<xsl:value-of select="LABEL"/>			<xsl:call-template name="add_coma_if_not_last"/>		</xsl:for-each>	</xsl:template>	<xsl:template match="ELEMENT[@module = 'DEPENDENCY']" mode="display_content">		<xsl:param name="node"/>		<xsl:param name="mID"/>		<xsl:apply-templates select="//*[name() = $node and @ID = $mID]/DEPENDENCIES/DEPENDENCY[@type = current()/@type]" mode="display_content"/>	</xsl:template>	<xsl:template match="DEPENDENCY" mode="display_content">		<xsl:for-each select="*">			<xsl:apply-templates select="." mode="title"/>			<xsl:call-template name="add_coma_if_not_last"/>		</xsl:for-each>	</xsl:template>	<!-- -->	<!-- detail pour chaque entrÃ©e -->	<xsl:template match="*" mode="data">		<tr>			<xsl:apply-templates select="/RESPONSE/DISPLAY/*" mode="display">				<xsl:with-param name="mID" select="@ID"/>				<xsl:with-param name="node" select="name()"/>			</xsl:apply-templates>		</tr>	</xsl:template>	<!-- -->	<!-- specific DEPENDENCY templates -->	<xsl:template name="display_contact_dependency">		<xsl:param name="dependency"/>		<xsl:for-each select="DEPENDENCIES/DEPENDENCY[@type = $dependency]/CONTACT">			<xsl:apply-templates select="." mode="title"/>			<xsl:call-template name="add_coma_if_not_last"/>		</xsl:for-each>	</xsl:template>	<!-- -->	<!-- specific CONTACT templates -->	<xsl:template match="CONTACT" mode="title">		<xsl:value-of select="INFO/DENOMINATION"/>	</xsl:template>	<xsl:template match="CONTACT[INFO/DENOMINATION = '']" mode="title">		<xsl:value-of select="INFO/TITLE"/>		<xsl:text> </xsl:text>		<xsl:value-of select="INFO/FIRSTNAME"/>		<xsl:text> </xsl:text>		<xsl:value-of select="INFO/LASTNAME"/>	</xsl:template>	<!-- -->	<!-- basic tricks -->	<xsl:template name="add_coma_if_not_last">		<xsl:if test="position() != last()">			<xsl:text>, </xsl:text>		</xsl:if>	</xsl:template></xsl:stylesheet>